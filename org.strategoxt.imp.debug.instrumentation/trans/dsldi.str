module dsldi
/*
This module only contains strategies that are used in the SEL-editor spoofax project.
The core debug-instrumentation should be in libdsldi which will be compiled to a separate jar.
*/
imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/DSLDI
  lib/editor-common.generated


rules // Main editor interface (defined by editor/DSLDI-Builders and -References.esv)

  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected // we just return the input term

  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast, errors, warnings, notes)
    with
      editor-init;
      //analyze;
      //errors   := <collect-all(constraint-error, conc)> ast;
      //warnings := <collect-all(constraint-warning, conc)> ast;
      //notes    := <collect-all(constraint-note, conc)> ast
      errors := [];
      warnings := [];
      notes := []

imports
    libdsldi/sel/links

strategies
    
  show-extract-transformations:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      !ast
      ; get-sel-links-as-list
      ; result := <map(get-extract-transformation)> // list of strings
      ; filename := <guarantee-extension(|"extract.aterm")> path


  show-generate-transformations:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      !ast
      ; get-sel-links-as-list
      ; result := <map(get-gen-transformation)> // list of strings
      ; filename := <guarantee-extension(|"generate.aterm")> path