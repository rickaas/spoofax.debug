module libdsldi/sel/result-reporting

signature
  constructors
      // name, followed by a list of expression
      
      // source-filename, target-filename
      Success       : ID * ID -> InstrumentationResult
      
      // source-filename
      Failure      : ID * ID -> InstrumentationResult

imports
    libdsldi/logging/logging // logging
    libdsldi/utils
    libdsldi/sel/program-metadata
    
imports
    libdsldi/sel/options
    libdsldi/sel/dsl-io

imports
  libstratego-lib
  libstratego-sglr
  libstratego-gpp
      
strategies
    isSuccess :
        s@Success(_,_) -> s
    isFailure :
        f@Failure(_,_) -> f

    getFilenamesWithSuccess =
        filter(isSuccess) ; map(\Success(input, output) -> input\)
    getFilenamesWithFailure =
        filter(isFailure) ; map(\Failure(message, location) -> location\)
        
    result-item-to-row-string :
        Failure(message, location) -> <separate-by(|"\t"); concat-strings> [location, message]
    result-item-to-row-string :
        Success(input, output) -> <separate-by(|"\t"); concat-strings> [input, output]
        
    /**
     * Write instrumentation statistics to STDOUT
     * Returns a list of terms, each item in de list is Success or Failure term and corresponds to an instrumented file.
     */
    report-instrumentation =
        result := <GET-INSTRUMENTATION-SUMMARY>
        ; log-info-msg(|"Instrumentation summary:")
        ; suc-count := <filter(isSuccess); length> result
        ; fail-count := <filter(isFailure); length> result
        ; <log-info(|"instrumented file count: ")> suc-count
        ; <log-info(|"instrumentation failed count: ")> fail-count
        ; if get-report-failures-location then
              get-report-failures-location
              ; log-info(|"Creating report with failed files:")
              ; !result
              ; create-result-report(isFailure, result-item-to-row-string|<get-report-failures-location>)
          end
        ; if get-report-success-location then
              get-report-success-location
              ; log-info(|"Creating report with succeeded files...")
              ; !result
              ; create-result-report(isSuccess, result-item-to-row-string|<get-report-success-location>)
          end
        //; !("foo.aterm", "contents")
        ; !result
    
    create-result-report(result-filter, result-item-to-row-string|report-location) = ?result
        ;filter(result-filter)
        ;map(result-item-to-row-string)
        ; separate-by(|"\n")
        ; concat-strings => contents
        ; write-to-file(|report-location, contents)
          <+ <err(|"Could not write report to:")> report-location

    
    failed-extract(|extract-name) =
        ?program-fragment-aterm
        ; <err(|"Failed to execute extract strategy: ")> extract-name
        ; <log-debug-depth(err(|"... on term:"))> program-fragment-aterm
        ; <log-vomit(|"... on term: ")> program-fragment-aterm

    failed-generate(|generate-name) =
        ?program-fragment-aterm
        ; <err(|"Failed to execute generate strategy: ")> generate-name
        ; <log-debug-depth(err(|"... on term:"))> program-fragment-aterm
        ; <log-vomit(|"... on term: ")> program-fragment-aterm
          
    // a list of terms, each item in de list is Success or Failure term and corresponds to an instrumented file.
    SET-INSTRUMENTATION-SUMMARY = ?result
        ; rules(GET-INSTRUMENTATION-SUMMARY: _ -> result)

    // the total number of files that will be instrumented
    SET-TOTAL-WORKUNITS = ?count
        ;rules(GET-TOTAL-WORKUNITS: _ -> count)

    // the progress, should be between 0 and GET-TOTAL-WORKUNITS
    SET-WORKUNIT-PROGRESS = ?progress
        ;rules(GET-WORKUNIT-PROGRESS: _ -> progress)
         
    next-workunit = 
        GET-WORKUNIT-PROGRESS
        ; inc
        ; SET-WORKUNIT-PROGRESS
          
    workunit-progress-as-string =
        <concat-strings> [
            <GET-WORKUNIT-PROGRESS; int-to-string>,
            "/",
            <GET-TOTAL-WORKUNITS; int-to-string>
        ]
        
strategies

  /**
   * @param s The strategy for which we'll do the timing
   * @param msg A message to describe the strategy in the logs
   * @param level The logging level of the statistics
   */
  dsldi-log-timed(s|msg,severity : Severity) =
    ?current
    ; level := <verbose-level> severity
    ; if <geq>(<get-config> "--statistics", level) then
      where(times => starttime)
    ; !current; s
    ; where(
        <diff-times>(<times>,starttime)
      ; <concat-strings>[ <align-left>(' ', msg, 27)
                        , " : [user/system] = ["
                        , <self-children-user-time; ticks-to-seconds ; real-to-string(|2)>
                        , "s/"
                        , <self-children-sys-time; ticks-to-seconds ; real-to-string(|2)>
                        , "s]"
                        ]
      ; log(|Info(),<id>)
      )
    else
      !current; s
    end
    
strategies
    
    /**
     * Measure duration of Strategy s which is part of a workunit.
     * The duration can be retreived by calling <GET-SUBWORKUNIT-STAT> stat-key 
     */
    profile-subworkunit-stat-duration(s|stat-key) = 
    	?current
    	; where(times => starttime)
    	; !current; s
    	; where(
    	      <diff-times>(<times>,starttime) => duration
    	      ; <SET-SUBWORKUNIT-STAT> (stat-key, duration)
          )
    
    /**
     * Get all subworkunit statistics defined for the current workunit scope.
     * The subworkunit stats are stored as dynamic rules within the "workunit" dr-scope.
     * Get them before the dr-scope ends.
     * List<(stat-key<String>, stat)>
     */
    get-all-workunit-stats =
    	all-keys-GET-SUBWORKUNIT-STAT
    	; map(\stat-key -> (stat-key, <GET-SUBWORKUNIT-STAT>)\) => stats-list
    
    SET-SUBWORKUNIT-STAT = ?(stat-key, stat-value)
    ; rules(GET-SUBWORKUNIT-STAT: stat-key -> stat-value)
    
    SET-WORKUNIT-STATS = ?(workunit-key, stats)
    ; rules(GET-WORKUNIT-STATS: workunit-key -> stats)
    
    inc-subworkunit-stat(|stat-key) = 
        if <GET-SUBWORKUNIT-STAT> stat-key then
            <GET-SUBWORKUNIT-STAT> stat-key
        else
            !0
        end
        ; inc
        ; <SET-SUBWORKUNIT-STAT> (stat-key, <id>)
          
    report-workunit-stat = ?key
        ; <log-info(|"Workunit statistics for ")> key
        ; GET-WORKUNIT-STATS
        ; log-info(|"stats: ")
         
    // file-workunit-stats = 
    //     ![
    //         ("filename", filename),
    //         ("parse-time", parse-time), 
    //         ("instrumentation-time",instrumentation-time),
    //         ("write-time", write-time),
    //         ("step-event-count", step-event-count)
    //         ("enter-event-count", enter-event-count)
    //         ("exit-event-count", exit-event-count)
    //       ]