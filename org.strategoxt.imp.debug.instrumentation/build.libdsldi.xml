<?xml version="1.0" encoding="UTF-8" ?>

<project name="build.libdsldi">

    <target name="dist">
    	<!-- 
    	Only libdsldi.jar is distributed because it i a standalone jar, 
    	it contains the stratego code and external strategies implemented in Java
        <copy file="${include}/dsldi-java-source.jar" preservelastmodified="true" todir="${dist}" />
        <copy file="${include}/dsldi-java.jar" preservelastmodified="true" todir="${dist}" />
        <copy file="${include}/dsldi-source.jar" preservelastmodified="true" todir="${dist}" />
        <copy file="${include}/dsldi.jar" preservelastmodified="true" todir="${dist}" />
        -->
        <copy file="${include}/libdsldi-source.jar" preservelastmodified="true" todir="${dist}" />
        <copy file="${include}/libdsldi.jar" preservelastmodified="true" todir="${dist}" />
        <copy file="${include}/libdsldi.rtree" preservelastmodified="true" todir="${dist}" />
    </target>
    
    <!-- Stratego to Java compiler -->
    <!-- Assume rtg2sig is already called via the parent target -->
    <target name="libdsldi.stratego.jar">
        <!-- The dependset task compares a set of sources with a set of target files. 
        If any of the sources has been modified more recently than any of the target files, 
        all of the target files are removed. -->
        <dependset>
            <srcfileset dir="${basedir}">
                <include name="**/*.str"/>
                <include name="**/*.astr"/>
                <exclude name="lib/*.generated.str"/>
            </srcfileset>
            <!-- if any of the stratego files are new, then remove the generated java files -->
            <targetfileset file="${src-gen}/{build.stratego.library.location}/trans/Main.java"/>
        </dependset>
        <!-- before compiling str to Java, we might have to instrument the stratego code -->
        <if>
            <equals arg1="${str.instrumentation.enabled}" arg2="true" />
            <then>
                <touch file="${trans}/libdsldi/main.str" />
                <antcall target="instrument-all" />
            </then>
        </if>
        <!-- now compile the stuff to Java -->
        <available file="${src-gen}/{build.stratego.library.location}/trans/Main.java" property="strc-java.available"/>
        <antcall target="copy-jar"/>
        <antcall target="libdsldi.stratego.jar.deletehelper"/>
        <antcall target="libdsldi.stratego.jvm.helper">
            <param name="build.stratego.outputfile" value="${src-gen}/${build.stratego.library.location}/trans/Main.java"/>
            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
        </antcall>
        <!--<javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" srcdir="${src-gen}" includes="trans/**" destdir="${build}" source="1.5" target="1.5" debug="on"/>-->
        <!-- deleting the classfiles before compiling-->
        <delete>
            <fileset dir="${build}" includes="${build.stratego.library.location}/trans/**" />
            <fileset dir="${build}" includes="${build.stratego.library.location}/strategies/**" />
        </delete>
        <!-- compile java -->
        <javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" 
            destdir="${build}" 
            source="1.5" target="1.5" debug="on">
            <src path="${src-gen}"/>
            <include name="${build.stratego.library.location}/trans/**" />
            <include name="${build.stratego.library.location}/strategies/**" />
        </javac>
        <!-- copy generated rtree to include/libdsldi.rtree -->
        <copy file="${src-gen}/${build.stratego.library.location}/trans/Main.rtree" tofile="${include}/lib${strmodule}.rtree"/>
        <!-- RL: is this still needed? the /trans directory is used by the dsldi.jar (SEL editor plugin)
        copy all other generated files to the build-directory so they will be included when making the jar -->
        <copy todir="${build}/trans">
            <fileset dir="${src-gen}/${build.stratego.library.location}/trans" excludes="**/*.java"/>
        </copy>
        <!--
          the libdsldi.jar (a standalone stratego jar) also references other generated files (e.g. DSLDI.tbl)
        -->
        <copy todir="${build}/${build.stratego.library.location}/trans">
            <fileset dir="${src-gen}/${build.stratego.library.location}/trans" excludes="**/*.java"/>
        </copy>
        <!-- Create a jar without java source code files -->
        <jar 
            basedir="${build}" 
            destfile="${include}/lib${strmodule}.tmp.jar"
        >
            <include name="${build.stratego.library.location}/trans/**" />
            <include name="${build.stratego.library.location}/strategies/**" />
        </jar>
        <move file="${include}/lib${strmodule}.tmp.jar" tofile="${include}/lib${strmodule}.jar"/>
        <antcall target="make-source-jars"/>
        <!-- Delete the class files of the stratego code -->
        <delete>
            <fileset dir="${build}" includes="${build.stratego.library.location}/trans/**"/>
        </delete>
    </target>

    <target name="libdsldi.stratego.jar.deletehelper" unless="strc-java.available">
        <delete>
            <fileset dir="${src-gen}" includes="trans/**"/>
            <fileset dir="${build}" includes="trans/**"/>
        </delete>
    </target>

    <target name="check-classpath-strj">
        <available classname="org.strategoxt.strj.Main" property="check-classpath-strj.available"/>
        <antcall target="check-classpath-strj.helper"/>  
    </target>

    <target name="check-classpath-strj.helper" unless="check-classpath-strj.available">
        <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
        <echo level="error" message="Make sure it is on the class path."/>
        <echo level="error" message=""/>               
        <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
        <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
        <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
        <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
        <fail/>
    </target>

    <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
        <isset property="java.jar.enabled"/>
    </condition>
	
    <path id="utils.class.path">
         <pathelement path="${java.class.path}"/>
                 <fileset dir="utils">
                     <include name="**/*.jar"/>
             </fileset>
     </path>
    <!-- 
       Compile the stratego code to java.
    -->
    <target name="libdsldi.stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
        <echo message="Build the libdsldi.jar" />
        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
        <!-- Create subdirectory that matches package-name -->
        <mkdir dir="${src-gen}/${build.stratego.library.location}/trans" />
    	
        <java classname="org.strategoxt.strj.Main" failonerror="true" classpathref="utils.class.path">
            <arg value="-i"/>
            <arg value="${trans}/libdsldi/main.str"/>
            <!-- use this if we want to split the stratego code in two jars! -->
            <arg value="--main"/>
            <arg value="launch-di"/>
            <!-- <arg value="${trans}/${strmodule}.str"/> -->
            <!-- Includes dsldi-library code and sel-editor code-->
            <arg value="-o"/>
            <arg value="${build.stratego.outputfile}"/>
            <arg value="-p"/>
            <arg value="${build.stratego.library.name}.trans"/>
            <!-- used to be "trans" but we want a custom package name -->
            <arg value="--library"/>
            <arg value="--clean"/>
            <arg line="${build.stratego.args}"/>
            <arg line="${build.stratego.extraargs}"/>
            <arg line="${externaljarflags}"/>
            <arg line="${externaldefimport}"/>
            <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
        </java>
        <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
        <!-- <mkdir dir="${build}/trans" /> -->
    </target>

    <!-- create jars that contain the java source code -->
    <target name="make-source-jars">
        <!-- create source jar for libdsldi.jar -->
        <jar destfile="${include}/lib${strmodule}-source.tmp.jar" >
            <fileset dir="${src-gen}">
                <include name="${build.stratego.library.location}/trans/**"/>
                <include name="${build.stratego.library.location}/strategies/**"/>
            </fileset>
        </jar>
        <!-- create source jar for dsldi-java.jar -->
        <jar destfile="${include}/${strmodule}-java-source.tmp.jar" >
            <fileset dir="${src-gen}">
                <include name="${build.stratego.library.location}/**"/>
                <exclude name="${build.stratego.library.location}/trans/**"/>
            </fileset>
        </jar>
        <!-- create source jar for dsldi.jar -->
        <jar destfile="${include}/${strmodule}-source.tmp.jar" >
            <fileset dir="${src-gen}">
                <exclude name="${build.stratego.library.location}/trans/**"/>
                <exclude name="${build.stratego.library.location}/strategies/**"/>
            </fileset>
        </jar>
        <move file="${include}/lib${strmodule}-source.tmp.jar" tofile="${include}/lib${strmodule}-source.jar"/>
        <move file="${include}/${strmodule}-java-source.tmp.jar" tofile="${include}/${strmodule}-java-source.jar"/>
        <move file="${include}/${strmodule}-source.tmp.jar" tofile="${include}/${strmodule}-source.jar"/>

    </target>
</project>
